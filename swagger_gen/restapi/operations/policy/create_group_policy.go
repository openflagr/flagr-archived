// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateGroupPolicyHandlerFunc turns a function with the right signature into a create group policy handler
type CreateGroupPolicyHandlerFunc func(CreateGroupPolicyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateGroupPolicyHandlerFunc) Handle(params CreateGroupPolicyParams) middleware.Responder {
	return fn(params)
}

// CreateGroupPolicyHandler interface for that can handle valid create group policy params
type CreateGroupPolicyHandler interface {
	Handle(CreateGroupPolicyParams) middleware.Responder
}

// NewCreateGroupPolicy creates a new http.Handler for the create group policy operation
func NewCreateGroupPolicy(ctx *middleware.Context, handler CreateGroupPolicyHandler) *CreateGroupPolicy {
	return &CreateGroupPolicy{Context: ctx, Handler: handler}
}

/* CreateGroupPolicy swagger:route POST /group policy grouping createGroupPolicy

CreateGroupPolicy create group policy API

*/
type CreateGroupPolicy struct {
	Context *middleware.Context
	Handler CreateGroupPolicyHandler
}

func (o *CreateGroupPolicy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateGroupPolicyParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
