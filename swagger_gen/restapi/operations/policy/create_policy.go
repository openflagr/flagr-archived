// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreatePolicyHandlerFunc turns a function with the right signature into a create policy handler
type CreatePolicyHandlerFunc func(CreatePolicyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreatePolicyHandlerFunc) Handle(params CreatePolicyParams) middleware.Responder {
	return fn(params)
}

// CreatePolicyHandler interface for that can handle valid create policy params
type CreatePolicyHandler interface {
	Handle(CreatePolicyParams) middleware.Responder
}

// NewCreatePolicy creates a new http.Handler for the create policy operation
func NewCreatePolicy(ctx *middleware.Context, handler CreatePolicyHandler) *CreatePolicy {
	return &CreatePolicy{Context: ctx, Handler: handler}
}

/* CreatePolicy swagger:route POST /policy policy createPolicy

CreatePolicy create policy API

*/
type CreatePolicy struct {
	Context *middleware.Context
	Handler CreatePolicyHandler
}

func (o *CreatePolicy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreatePolicyParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
