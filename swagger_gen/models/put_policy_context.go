// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutPolicyContext put policy context
//
// swagger:model putPolicyContext
type PutPolicyContext struct {

	// new policy
	// Required: true
	NewPolicy *Policy `json:"newPolicy"`

	// old policy
	// Required: true
	OldPolicy *Policy `json:"oldPolicy"`
}

// Validate validates this put policy context
func (m *PutPolicyContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNewPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOldPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PutPolicyContext) validateNewPolicy(formats strfmt.Registry) error {

	if err := validate.Required("newPolicy", "body", m.NewPolicy); err != nil {
		return err
	}

	if m.NewPolicy != nil {
		if err := m.NewPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *PutPolicyContext) validateOldPolicy(formats strfmt.Registry) error {

	if err := validate.Required("oldPolicy", "body", m.OldPolicy); err != nil {
		return err
	}

	if m.OldPolicy != nil {
		if err := m.OldPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oldPolicy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put policy context based on the context it is used
func (m *PutPolicyContext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNewPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOldPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PutPolicyContext) contextValidateNewPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.NewPolicy != nil {
		if err := m.NewPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *PutPolicyContext) contextValidateOldPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.OldPolicy != nil {
		if err := m.OldPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oldPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PutPolicyContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PutPolicyContext) UnmarshalBinary(b []byte) error {
	var res PutPolicyContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
